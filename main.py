import os
import tempfile
import hashlib
import traceback
import logging
from PIL import Image
from telebot import TeleBot, types
import torch
import open_clip
from database import init_db, save_user_style, save_style_vector, get_user_styles, check_duplicate_image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°—Ç–∏–ª–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
fashion_styles = {
    "avangard": "–∞–≤–∞–Ω–≥–∞—Ä–¥",
    "babiy": "–±–∞–±–∏–π —Å—Ç–∏–ª—å",
    "bokho": "–±–æ—Ö–æ",
    "business_casual": "–±–∏–∑–Ω–µ—Å-–∫—ç–∂—É–∞–ª",
    "casual": "–∫—ç–∂—É–∞–ª",
    "classic": "–∫–ª–∞—Å—Å–∏–∫–∞",
    "dendy": "–¥–µ–Ω–¥–∏",
    "feminine": "—Ñ–µ–º–∏–Ω–Ω—ã–π",
    "ethnicity": "—ç—Ç–Ω–∏—á–µ—Å–∫–∏–π",
    "drama": "–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
    "grunge": "–≥—Ä–∞–Ω–∂",
    "jokey": "–∂–æ–∫–µ–π",
    "military": "–º–∏–ª–∏—Ç–∞—Ä–∏",
    "minimalism": "–º–∏–Ω–∏–º–∞–ª–∏–∑–º",
    "old_money": "–æ–ª–¥ –º–∞–Ω–∏",
    "preppy": "–ø—Ä–µ–ø–ø–∏",
    "quiet_luxury": "—Ç–∏—Ö–∞—è —Ä–æ—Å–∫–æ—à—å",
    "retro": "—Ä–µ—Ç—Ä–æ",
    "romance": "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π",
    "safari": "—Å–∞—Ñ–∞—Ä–∏",
    "sailor": "–º–æ—Ä—Å–∫–æ–π —Å—Ç–∏–ª—å",
    "smart_casual": "—Å–º–∞—Ä—Ç-–∫—ç–∂—É–∞–ª",
    "strange": "—Å—Ç—Ä–∞–Ω–Ω—ã–π",
    "vintazh": "–≤–∏–Ω—Ç–∞–∂"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
try:
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    model_name = "ViT-B-32"
    pretrained = "laion2b_s34b_b79k"
    model, _, preprocess = open_clip.create_model_and_transforms(model_name, pretrained=pretrained)
    checkpoint_path = r"C:\Users\KAWAKI\Desktop\–∏–∏—à–∫–∞\AI work\fashion_clip_finetuned_epoch1.pt"

    if not os.path.exists(checkpoint_path):
        raise FileNotFoundError(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {checkpoint_path}")

    model.load_state_dict(torch.load(checkpoint_path, map_location="cpu"))
    model.eval()
    logger.info("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
    raise

TELEGRAM_TOKEN = ""
bot = TeleBot(TELEGRAM_TOKEN)

# –°–µ—Å—Å–∏–∏
user_sessions = {}
active_requests = set()


def calculate_image_hash(image_path):
    try:
        with open(image_path, 'rb') as f:
            return hashlib.sha256(f.read()).hexdigest()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ö–µ—à–∞: {str(e)}")
        return None


def create_style_keyboard():
    try:
        markup = types.InlineKeyboardMarkup(row_width=3)
        buttons = [
            types.InlineKeyboardButton(
                fashion_styles[style],
                callback_data=f"style_{style}"
            ) for style in fashion_styles
        ]
        markup.add(*buttons)
        return markup
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
        return None


def cleanup_session(user_id):
    try:
        if user_id in user_sessions:
            session = user_sessions[user_id]
            if 'image_path' in session and os.path.exists(session['image_path']):
                os.remove(session['image_path'])
            del user_sessions[user_id]
        if user_id in active_requests:
            active_requests.remove(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")


@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —Å—Ç–∏–ª—å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id

    if user_id in active_requests:
        bot.reply_to(message, "‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        return

    active_requests.add(user_id)
    temp_file_path = None

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
            tmp_file.write(downloaded_file)
            temp_file_path = tmp_file.name

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞
        image_hash = calculate_image_hash(temp_file_path)
        if not image_hash:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ë–î
        matched_style = check_duplicate_image(user_id, image_hash)
        if matched_style:
            bot.send_message(
                message.chat.id,
                f"üìå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ. –°—Ç–∏–ª—å: *{fashion_styles.get(matched_style, matched_style)}*",
                parse_mode="Markdown"
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(temp_file_path).convert('RGB')
        image_tensor = preprocess(image).unsqueeze(0)

        with torch.no_grad():
            image_features = model.encode_image(image_tensor)
            image_features /= image_features.norm(dim=-1, keepdim=True)

            text_tokens = open_clip.tokenize(list(fashion_styles.keys()))
            text_features = model.encode_text(text_tokens)
            text_features /= text_features.norm(dim=-1, keepdim=True)

            similarity = (100.0 * image_features @ text_features.T)
            probs = similarity.softmax(dim=-1)[0]
            top_probs, top_indices = torch.topk(probs, 3)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-3 —Å—Ç–∏–ª—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
        top_styles = []
        for i in range(3):
            style = list(fashion_styles.keys())[top_indices[i]]
            prob = round(top_probs[i].item() * 100, 1)
            top_styles.append((style, prob))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        user_sessions[user_id] = {
            'features': image_features,
            'image_path': temp_file_path,
            'image_hash': image_hash,
            'message_id': message.message_id,
            'top_styles': top_styles
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-3 —Å—Ç–∏–ª—è–º–∏ (—Å—Ç–∏–ª–∏ –≤—ã–¥–µ–ª–µ–Ω—ã –∂–∏—Ä–Ω—ã–º)
        styles_message = "\n".join(
            [f"‚Ä¢ *{fashion_styles[style]}*: {prob}%" for style, prob in top_styles]
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", callback_data=f"accept_{top_styles[0][0]}"),
            types.InlineKeyboardButton("‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="dislike")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        sent_msg = bot.send_message(
            message.chat.id,
            f"üé® –¢–æ–ø-3 –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã—Ö —Å—Ç–∏–ª—è:\n{styles_message}\n\n–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?",
            parse_mode="Markdown",
            reply_markup=markup
        )
        user_sessions[user_id]['bot_message_id'] = sent_msg.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}\n{traceback.format_exc()}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        if user_id in active_requests:
            active_requests.remove(user_id)
    finally:
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.remove(temp_file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ active_requests, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if user_id in active_requests and (user_id not in user_sessions or 'bot_message_id' in user_sessions[user_id]):
            active_requests.remove(user_id)


@bot.callback_query_handler(func=lambda call: True)
def handle_all_callbacks(call):
    try:
        user_id = call.from_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if user_id not in user_sessions:
            bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return

        if call.data.startswith("accept_"):
            handle_accept_style(call)
        elif call.data == "dislike":
            handle_dislike_style(call)
        elif call.data.startswith("style_"):
            handle_select_style(call)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}\n{traceback.format_exc()}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        if user_id in active_requests:
            active_requests.remove(user_id)


def handle_accept_style(call):
    user_id = call.from_user.id
    style_key = call.data[len("accept_"):]
    style_name = fashion_styles.get(style_key, style_key)

    if user_id not in user_sessions:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
        return

    session = user_sessions[user_id]
    try:
        save_style_vector(
            user_id=user_id,
            style=style_key,
            vector=session['features'][0].cpu().numpy().tobytes(),
            image_hash=session['image_hash']
        )
        save_user_style(user_id, style_key)

        bot.answer_callback_query(call.id, f"‚úÖ {style_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        bot.edit_message_text(
            f"‚ú® –û—Ç–ª–∏—á–Ω–æ! –°—Ç–∏–ª—å *{style_name}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}")
        raise
    finally:
        cleanup_session(user_id)


def handle_dislike_style(call):
    user_id = call.from_user.id

    if user_id not in user_sessions:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
        return

    try:
        session = user_sessions[user_id]
        top_styles = session.get('top_styles', [])

        if not top_styles:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-3 —Å—Ç–∏–ª—è–º–∏ (—Å—Ç–∏–ª–∏ –≤—ã–¥–µ–ª–µ–Ω—ã –∂–∏—Ä–Ω—ã–º)
        styles_message = "\n".join(
            [f"‚Ä¢ *{fashion_styles[style]}*: {prob}%" for style, prob in top_styles]
        )

        markup = create_style_keyboard()
        if not markup:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")

        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            f"üëé –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.\n\n–¢–æ–ø-3 —Å—Ç–∏–ª—è:\n{styles_message}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–ª—å:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π", show_alert=True)
        if user_id in active_requests:
            active_requests.remove(user_id)


def handle_select_style(call):
    user_id = call.from_user.id
    style_key = call.data[len("style_"):]
    style_name = fashion_styles.get(style_key, style_key)

    if user_id not in user_sessions:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
        return

    try:
        session = user_sessions[user_id]
        save_style_vector(
            user_id=user_id,
            style=style_key,
            vector=session['features'][0].cpu().numpy().tobytes(),
            image_hash=session['image_hash']
        )
        save_user_style(user_id, style_key)

        bot.answer_callback_query(call.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {style_name}")
        bot.edit_message_text(
            f"üíæ –°—Ç–∏–ª—å *{style_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
    finally:
        cleanup_session(user_id)


if __name__ == '__main__':
    try:
        init_db()
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}")
